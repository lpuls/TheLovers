// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Temp/Config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Config {

  /// <summary>Holder for reflection information generated from Temp/Config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for Temp/Config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFUZW1wL0NvbmZpZy5wcm90byJoCgxCdWxsZXRDb25maWcSCgoCSUQYASAB",
            "KAUSDAoETm90ZRgCIAEoCRIMCgRQYXRoGAMgASgJEhEKCUxvZ2ljUGF0aBgE",
            "IAEoCRINCgVTcGVlZBgFIAEoAhIOCgZEYW1hZ2UYBiABKAUiMAoRTWFpblVJ",
            "VGFsa0NvbnRleHQSCgoCSUQYASABKAUSDwoHQ29udGV4dBgCIAEoCSJnCgdN",
            "aXNzaW9uEgoKAklEGAEgASgFEg0KBVRpdGxlGAIgASgJEg8KB0NvbnRleHQY",
            "AyABKAkSDAoEUGF0aBgEIAEoCRIMCgRJY29uGAUgASgJEgkKAVgYBiABKAUS",
            "CQoBWRgHIAEoBSJHCgpQY2tlckl0ZW1zEgoKAklEGAEgASgFEgwKBE5vdGUY",
            "AiABKAkSDAoEUGF0aBgDIAEoCRIRCglMb2dpY1BhdGgYBCABKAkiqAEKClVu",
            "aXRDb25maWcSCgoCSUQYASABKAUSDAoEUGF0aBgCIAEoCRIRCglMb2dpY1Bh",
            "dGgYAyABKAkSDgoGSGVhbHRoGAQgASgFEg0KBVNwZWVkGAUgASgCEhcKD0Ry",
            "b3BQcm9iYWJpbGl0eRgGIAEoBRINCgVEcm9wcxgHIAMoBRIUCgxJbXBhY3RE",
            "YW1hZ2UYCCABKAUSEAoIV2VhcG9uSUQYCSABKAUiXgoGV2VhcG9uEgoKAklE",
            "GAEgASgFEgwKBE5vdGUYAiABKAkSDAoEUGF0aBgDIAEoCRIOCgZOZXh0THYY",
            "BCABKAUSDgoGVHlwZUlEGAUgASgFEgwKBEljb24YBiABKAkiKwoIVmVjdG9y",
            "M0QSCQoBWBgBIAEoAhIJCgFZGAIgASgCEgkKAVoYAyABKAIiKwoGRGVwZW5k",
            "EhMKC1JlbG9hZENvdW50GAEgASgFEgwKBFBhdGgYAiABKAkikgEKC0dhbWVT",
            "ZXR0aW5nEgoKAklEGAEgASgFEhEKCU1heFBsYXllchgCIAEoBRIQCghTZXJ2",
            "ZXJJUBgDIAEoCRISCgpTZXJ2ZXJQb3J0GAQgASgFEhAKCENsaWVudElQGAUg",
            "ASgJEhIKCkNsaWVudFBvcnQYBiABKAUSGAoHRGVwZW5kcxgHIAEoCzIHLkRl",
            "cGVuZCobCgdFeGFtcGxlEhAKDEV4YW1wbGVfTk9ORRAAKk0KCUdhbWVNb2Rl",
            "bBISCg5HYW1lTW9kZWxfTk9ORRAAEhQKEEdhbWVNb2RlbF9TSU5HTEUQARIW",
            "ChJHYW1lTW9kZWxfTVVMVElQTEUQAipsCgpXZWFwb25UeXBlEhMKD1dlYXBv",
            "blR5cGVfTk9ORRAAEhYKEldlYXBvblR5cGVfR0FMVElORxABEhYKEldlYXBv",
            "blR5cGVfU0hPVEdVThACEhkKFVdlYXBvblR5cGVfRElTUEVSU0lPThADQgmq",
            "AgZDb25maWdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Config.Example), typeof(global::Config.GameModel), typeof(global::Config.WeaponType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.BulletConfig), global::Config.BulletConfig.Parser, new[]{ "ID", "Note", "Path", "LogicPath", "Speed", "Damage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.MainUITalkContext), global::Config.MainUITalkContext.Parser, new[]{ "ID", "Context" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.Mission), global::Config.Mission.Parser, new[]{ "ID", "Title", "Context", "Path", "Icon", "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.PckerItems), global::Config.PckerItems.Parser, new[]{ "ID", "Note", "Path", "LogicPath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.UnitConfig), global::Config.UnitConfig.Parser, new[]{ "ID", "Path", "LogicPath", "Health", "Speed", "DropProbability", "Drops", "ImpactDamage", "WeaponID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.Weapon), global::Config.Weapon.Parser, new[]{ "ID", "Note", "Path", "NextLv", "TypeID", "Icon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.Vector3D), global::Config.Vector3D.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.Depend), global::Config.Depend.Parser, new[]{ "ReloadCount", "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.GameSetting), global::Config.GameSetting.Parser, new[]{ "ID", "MaxPlayer", "ServerIP", "ServerPort", "ClientIP", "ClientPort", "Depends" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Example {
    [pbr::OriginalName("Example_NONE")] None = 0,
  }

  public enum GameModel {
    [pbr::OriginalName("GameModel_NONE")] None = 0,
    [pbr::OriginalName("GameModel_SINGLE")] Single = 1,
    [pbr::OriginalName("GameModel_MULTIPLE")] Multiple = 2,
  }

  public enum WeaponType {
    [pbr::OriginalName("WeaponType_NONE")] None = 0,
    [pbr::OriginalName("WeaponType_GALTING")] Galting = 1,
    [pbr::OriginalName("WeaponType_SHOTGUN")] Shotgun = 2,
    [pbr::OriginalName("WeaponType_DISPERSION")] Dispersion = 3,
  }

  #endregion

  #region Messages
  public sealed partial class BulletConfig : pb::IMessage<BulletConfig> {
    private static readonly pb::MessageParser<BulletConfig> _parser = new pb::MessageParser<BulletConfig>(() => new BulletConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BulletConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletConfig(BulletConfig other) : this() {
      iD_ = other.iD_;
      note_ = other.note_;
      path_ = other.path_;
      logicPath_ = other.logicPath_;
      speed_ = other.speed_;
      damage_ = other.damage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletConfig Clone() {
      return new BulletConfig(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Note" field.</summary>
    public const int NoteFieldNumber = 2;
    private string note_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Note {
      get { return note_; }
      set {
        note_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 3;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LogicPath" field.</summary>
    public const int LogicPathFieldNumber = 4;
    private string logicPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogicPath {
      get { return logicPath_; }
      set {
        logicPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 5;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "Damage" field.</summary>
    public const int DamageFieldNumber = 6;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BulletConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BulletConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Note != other.Note) return false;
      if (Path != other.Path) return false;
      if (LogicPath != other.LogicPath) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (Damage != other.Damage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Note.Length != 0) hash ^= Note.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (LogicPath.Length != 0) hash ^= LogicPath.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Note.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Note);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Path);
      }
      if (LogicPath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LogicPath);
      }
      if (Speed != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Speed);
      }
      if (Damage != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Damage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Note.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Note);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (LogicPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogicPath);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BulletConfig other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Note.Length != 0) {
        Note = other.Note;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.LogicPath.Length != 0) {
        LogicPath = other.LogicPath;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Note = input.ReadString();
            break;
          }
          case 26: {
            Path = input.ReadString();
            break;
          }
          case 34: {
            LogicPath = input.ReadString();
            break;
          }
          case 45: {
            Speed = input.ReadFloat();
            break;
          }
          case 48: {
            Damage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MainUITalkContext : pb::IMessage<MainUITalkContext> {
    private static readonly pb::MessageParser<MainUITalkContext> _parser = new pb::MessageParser<MainUITalkContext>(() => new MainUITalkContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainUITalkContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainUITalkContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainUITalkContext(MainUITalkContext other) : this() {
      iD_ = other.iD_;
      context_ = other.context_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainUITalkContext Clone() {
      return new MainUITalkContext(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Context" field.</summary>
    public const int ContextFieldNumber = 2;
    private string context_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Context {
      get { return context_; }
      set {
        context_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainUITalkContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainUITalkContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Context != other.Context) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Context.Length != 0) hash ^= Context.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Context.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Context);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Context.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Context);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainUITalkContext other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Context.Length != 0) {
        Context = other.Context;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Context = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Mission : pb::IMessage<Mission> {
    private static readonly pb::MessageParser<Mission> _parser = new pb::MessageParser<Mission>(() => new Mission());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mission(Mission other) : this() {
      iD_ = other.iD_;
      title_ = other.title_;
      context_ = other.context_;
      path_ = other.path_;
      icon_ = other.icon_;
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mission Clone() {
      return new Mission(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Context" field.</summary>
    public const int ContextFieldNumber = 3;
    private string context_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Context {
      get { return context_; }
      set {
        context_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 4;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icon" field.</summary>
    public const int IconFieldNumber = 5;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 6;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 7;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Title != other.Title) return false;
      if (Context != other.Context) return false;
      if (Path != other.Path) return false;
      if (Icon != other.Icon) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Context.Length != 0) hash ^= Context.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Context.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Context);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Path);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Icon);
      }
      if (X != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Context.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Context);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mission other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Context.Length != 0) {
        Context = other.Context;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Context = input.ReadString();
            break;
          }
          case 34: {
            Path = input.ReadString();
            break;
          }
          case 42: {
            Icon = input.ReadString();
            break;
          }
          case 48: {
            X = input.ReadInt32();
            break;
          }
          case 56: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PckerItems : pb::IMessage<PckerItems> {
    private static readonly pb::MessageParser<PckerItems> _parser = new pb::MessageParser<PckerItems>(() => new PckerItems());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PckerItems> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckerItems() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckerItems(PckerItems other) : this() {
      iD_ = other.iD_;
      note_ = other.note_;
      path_ = other.path_;
      logicPath_ = other.logicPath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckerItems Clone() {
      return new PckerItems(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Note" field.</summary>
    public const int NoteFieldNumber = 2;
    private string note_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Note {
      get { return note_; }
      set {
        note_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 3;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LogicPath" field.</summary>
    public const int LogicPathFieldNumber = 4;
    private string logicPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogicPath {
      get { return logicPath_; }
      set {
        logicPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PckerItems);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PckerItems other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Note != other.Note) return false;
      if (Path != other.Path) return false;
      if (LogicPath != other.LogicPath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Note.Length != 0) hash ^= Note.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (LogicPath.Length != 0) hash ^= LogicPath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Note.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Note);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Path);
      }
      if (LogicPath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LogicPath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Note.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Note);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (LogicPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogicPath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PckerItems other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Note.Length != 0) {
        Note = other.Note;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.LogicPath.Length != 0) {
        LogicPath = other.LogicPath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Note = input.ReadString();
            break;
          }
          case 26: {
            Path = input.ReadString();
            break;
          }
          case 34: {
            LogicPath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnitConfig : pb::IMessage<UnitConfig> {
    private static readonly pb::MessageParser<UnitConfig> _parser = new pb::MessageParser<UnitConfig>(() => new UnitConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitConfig(UnitConfig other) : this() {
      iD_ = other.iD_;
      path_ = other.path_;
      logicPath_ = other.logicPath_;
      health_ = other.health_;
      speed_ = other.speed_;
      dropProbability_ = other.dropProbability_;
      drops_ = other.drops_.Clone();
      impactDamage_ = other.impactDamage_;
      weaponID_ = other.weaponID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitConfig Clone() {
      return new UnitConfig(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LogicPath" field.</summary>
    public const int LogicPathFieldNumber = 3;
    private string logicPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogicPath {
      get { return logicPath_; }
      set {
        logicPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Health" field.</summary>
    public const int HealthFieldNumber = 4;
    private int health_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 5;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "DropProbability" field.</summary>
    public const int DropProbabilityFieldNumber = 6;
    private int dropProbability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DropProbability {
      get { return dropProbability_; }
      set {
        dropProbability_ = value;
      }
    }

    /// <summary>Field number for the "Drops" field.</summary>
    public const int DropsFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_drops_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> drops_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Drops {
      get { return drops_; }
    }

    /// <summary>Field number for the "ImpactDamage" field.</summary>
    public const int ImpactDamageFieldNumber = 8;
    private int impactDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImpactDamage {
      get { return impactDamage_; }
      set {
        impactDamage_ = value;
      }
    }

    /// <summary>Field number for the "WeaponID" field.</summary>
    public const int WeaponIDFieldNumber = 9;
    private int weaponID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponID {
      get { return weaponID_; }
      set {
        weaponID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Path != other.Path) return false;
      if (LogicPath != other.LogicPath) return false;
      if (Health != other.Health) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (DropProbability != other.DropProbability) return false;
      if(!drops_.Equals(other.drops_)) return false;
      if (ImpactDamage != other.ImpactDamage) return false;
      if (WeaponID != other.WeaponID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (LogicPath.Length != 0) hash ^= LogicPath.GetHashCode();
      if (Health != 0) hash ^= Health.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (DropProbability != 0) hash ^= DropProbability.GetHashCode();
      hash ^= drops_.GetHashCode();
      if (ImpactDamage != 0) hash ^= ImpactDamage.GetHashCode();
      if (WeaponID != 0) hash ^= WeaponID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (LogicPath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LogicPath);
      }
      if (Health != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Health);
      }
      if (Speed != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Speed);
      }
      if (DropProbability != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DropProbability);
      }
      drops_.WriteTo(output, _repeated_drops_codec);
      if (ImpactDamage != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ImpactDamage);
      }
      if (WeaponID != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(WeaponID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (LogicPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogicPath);
      }
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Health);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (DropProbability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DropProbability);
      }
      size += drops_.CalculateSize(_repeated_drops_codec);
      if (ImpactDamage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImpactDamage);
      }
      if (WeaponID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitConfig other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.LogicPath.Length != 0) {
        LogicPath = other.LogicPath;
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.DropProbability != 0) {
        DropProbability = other.DropProbability;
      }
      drops_.Add(other.drops_);
      if (other.ImpactDamage != 0) {
        ImpactDamage = other.ImpactDamage;
      }
      if (other.WeaponID != 0) {
        WeaponID = other.WeaponID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 26: {
            LogicPath = input.ReadString();
            break;
          }
          case 32: {
            Health = input.ReadInt32();
            break;
          }
          case 45: {
            Speed = input.ReadFloat();
            break;
          }
          case 48: {
            DropProbability = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            drops_.AddEntriesFrom(input, _repeated_drops_codec);
            break;
          }
          case 64: {
            ImpactDamage = input.ReadInt32();
            break;
          }
          case 72: {
            WeaponID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Weapon : pb::IMessage<Weapon> {
    private static readonly pb::MessageParser<Weapon> _parser = new pb::MessageParser<Weapon>(() => new Weapon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Weapon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Weapon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Weapon(Weapon other) : this() {
      iD_ = other.iD_;
      note_ = other.note_;
      path_ = other.path_;
      nextLv_ = other.nextLv_;
      typeID_ = other.typeID_;
      icon_ = other.icon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Weapon Clone() {
      return new Weapon(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Note" field.</summary>
    public const int NoteFieldNumber = 2;
    private string note_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Note {
      get { return note_; }
      set {
        note_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 3;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NextLv" field.</summary>
    public const int NextLvFieldNumber = 4;
    private int nextLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextLv {
      get { return nextLv_; }
      set {
        nextLv_ = value;
      }
    }

    /// <summary>Field number for the "TypeID" field.</summary>
    public const int TypeIDFieldNumber = 5;
    private int typeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "Icon" field.</summary>
    public const int IconFieldNumber = 6;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Weapon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Weapon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Note != other.Note) return false;
      if (Path != other.Path) return false;
      if (NextLv != other.NextLv) return false;
      if (TypeID != other.TypeID) return false;
      if (Icon != other.Icon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Note.Length != 0) hash ^= Note.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (NextLv != 0) hash ^= NextLv.GetHashCode();
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Note.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Note);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Path);
      }
      if (NextLv != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NextLv);
      }
      if (TypeID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TypeID);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Note.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Note);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (NextLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextLv);
      }
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Weapon other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Note.Length != 0) {
        Note = other.Note;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.NextLv != 0) {
        NextLv = other.NextLv;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Note = input.ReadString();
            break;
          }
          case 26: {
            Path = input.ReadString();
            break;
          }
          case 32: {
            NextLv = input.ReadInt32();
            break;
          }
          case 40: {
            TypeID = input.ReadInt32();
            break;
          }
          case 50: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector3D : pb::IMessage<Vector3D> {
    private static readonly pb::MessageParser<Vector3D> _parser = new pb::MessageParser<Vector3D>(() => new Vector3D());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3D> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3D() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3D(Vector3D other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3D Clone() {
      return new Vector3D(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3D);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3D other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Depend : pb::IMessage<Depend> {
    private static readonly pb::MessageParser<Depend> _parser = new pb::MessageParser<Depend>(() => new Depend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Depend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Depend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Depend(Depend other) : this() {
      reloadCount_ = other.reloadCount_;
      path_ = other.path_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Depend Clone() {
      return new Depend(this);
    }

    /// <summary>Field number for the "ReloadCount" field.</summary>
    public const int ReloadCountFieldNumber = 1;
    private int reloadCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReloadCount {
      get { return reloadCount_; }
      set {
        reloadCount_ = value;
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Depend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Depend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReloadCount != other.ReloadCount) return false;
      if (Path != other.Path) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReloadCount != 0) hash ^= ReloadCount.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReloadCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReloadCount);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReloadCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReloadCount);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Depend other) {
      if (other == null) {
        return;
      }
      if (other.ReloadCount != 0) {
        ReloadCount = other.ReloadCount;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReloadCount = input.ReadInt32();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameSetting : pb::IMessage<GameSetting> {
    private static readonly pb::MessageParser<GameSetting> _parser = new pb::MessageParser<GameSetting>(() => new GameSetting());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSetting(GameSetting other) : this() {
      iD_ = other.iD_;
      maxPlayer_ = other.maxPlayer_;
      serverIP_ = other.serverIP_;
      serverPort_ = other.serverPort_;
      clientIP_ = other.clientIP_;
      clientPort_ = other.clientPort_;
      depends_ = other.depends_ != null ? other.depends_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameSetting Clone() {
      return new GameSetting(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "MaxPlayer" field.</summary>
    public const int MaxPlayerFieldNumber = 2;
    private int maxPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPlayer {
      get { return maxPlayer_; }
      set {
        maxPlayer_ = value;
      }
    }

    /// <summary>Field number for the "ServerIP" field.</summary>
    public const int ServerIPFieldNumber = 3;
    private string serverIP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerIP {
      get { return serverIP_; }
      set {
        serverIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerPort" field.</summary>
    public const int ServerPortFieldNumber = 4;
    private int serverPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerPort {
      get { return serverPort_; }
      set {
        serverPort_ = value;
      }
    }

    /// <summary>Field number for the "ClientIP" field.</summary>
    public const int ClientIPFieldNumber = 5;
    private string clientIP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientIP {
      get { return clientIP_; }
      set {
        clientIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ClientPort" field.</summary>
    public const int ClientPortFieldNumber = 6;
    private int clientPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientPort {
      get { return clientPort_; }
      set {
        clientPort_ = value;
      }
    }

    /// <summary>Field number for the "Depends" field.</summary>
    public const int DependsFieldNumber = 7;
    private global::Config.Depend depends_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Config.Depend Depends {
      get { return depends_; }
      set {
        depends_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (MaxPlayer != other.MaxPlayer) return false;
      if (ServerIP != other.ServerIP) return false;
      if (ServerPort != other.ServerPort) return false;
      if (ClientIP != other.ClientIP) return false;
      if (ClientPort != other.ClientPort) return false;
      if (!object.Equals(Depends, other.Depends)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (MaxPlayer != 0) hash ^= MaxPlayer.GetHashCode();
      if (ServerIP.Length != 0) hash ^= ServerIP.GetHashCode();
      if (ServerPort != 0) hash ^= ServerPort.GetHashCode();
      if (ClientIP.Length != 0) hash ^= ClientIP.GetHashCode();
      if (ClientPort != 0) hash ^= ClientPort.GetHashCode();
      if (depends_ != null) hash ^= Depends.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (MaxPlayer != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxPlayer);
      }
      if (ServerIP.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServerIP);
      }
      if (ServerPort != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ServerPort);
      }
      if (ClientIP.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ClientIP);
      }
      if (ClientPort != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ClientPort);
      }
      if (depends_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Depends);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (MaxPlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayer);
      }
      if (ServerIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerIP);
      }
      if (ServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerPort);
      }
      if (ClientIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientIP);
      }
      if (ClientPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientPort);
      }
      if (depends_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Depends);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameSetting other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.MaxPlayer != 0) {
        MaxPlayer = other.MaxPlayer;
      }
      if (other.ServerIP.Length != 0) {
        ServerIP = other.ServerIP;
      }
      if (other.ServerPort != 0) {
        ServerPort = other.ServerPort;
      }
      if (other.ClientIP.Length != 0) {
        ClientIP = other.ClientIP;
      }
      if (other.ClientPort != 0) {
        ClientPort = other.ClientPort;
      }
      if (other.depends_ != null) {
        if (depends_ == null) {
          depends_ = new global::Config.Depend();
        }
        Depends.MergeFrom(other.Depends);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            MaxPlayer = input.ReadInt32();
            break;
          }
          case 26: {
            ServerIP = input.ReadString();
            break;
          }
          case 32: {
            ServerPort = input.ReadInt32();
            break;
          }
          case 42: {
            ClientIP = input.ReadString();
            break;
          }
          case 48: {
            ClientPort = input.ReadInt32();
            break;
          }
          case 58: {
            if (depends_ == null) {
              depends_ = new global::Config.Depend();
            }
            input.ReadMessage(depends_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
